# -*- coding: utf-8 -*-
"""컴퓨터자리와충전.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1q7sVK4Zb0bPFYEVEUyKjP5fr3M-Noy9Q
"""

import numpy as np

#④무선충전 => 경민
#자신이 앉는 자리 또는 컴퓨터 앞자리를 물어봄
#자신 자리에 앉을 때 전자기기가 책상 위에 올라가 있다면 충전중 이라는 말을 출력
class 컴퓨터자리와_충전:
    def __init__(self):
        self.컴퓨터_앞자리_찬자리 = [[],[]]
        self.좌석고유번호 = []
        self.전자기기_여부 = False
        self.인원수 = 0
        self.complete = False
        self.컴퓨터_앞자리_번호_등록안됨 = [[1,2,3,4,5,6],[1,2,3,4,5,6]]
        self.컴퓨터_앞자리_번호_등록됨 = [[],[]]
        self.컴퓨터_앞자리_물음 = [[],[]]
        self.고유번호_컴퓨터자리와학생 = [[],[],[],[]]
        self.고유번호 = []
        self.count = 0
        self.serialn = []
        # 컴퓨터 앞자리 번호의 첫번쨀 리스트의 인덱스 * 6한다음에 두번째 리스트의 인덱스 +1 을 빼주면 고유번호가 되겠네

    def 충전과정(self):
      # 충전과정메서드는 이닛과 다르게 반복이 끝날때까지 값을 저장하고 이것을 다시키면 사라진다. 즉 껏다가 다시키면 사라지는데 이것을 보완할 코드를 만들어야 할 것같다.
      # 껏다 키더라도 필요한 정보는 남기게
        # complete = False
        # 인원수 = 0
        # 전자기기_여부 == False:

        컴퓨터_앞자리_찬자리 = self.컴퓨터_앞자리_찬자리
        전자기기_여부 = self.전자기기_여부
        인원수 = self.인원수
        complete = self.complete
        컴퓨터_앞자리_번호_등록안됨 = self.컴퓨터_앞자리_번호_등록안됨
        컴퓨터_앞자리_번호_등록됨 =  self.컴퓨터_앞자리_번호_등록됨
        컴퓨터_앞자리_물음 = self.컴퓨터_앞자리_물음
        고유번호_컴퓨터자리와학생 = self.고유번호_컴퓨터자리와학생
        고유번호 = self.고유번호
        count = self.count
        serialn = self.serialn


        def 자리취소(self):
          cancleany = any(컴퓨터_앞자리_물음[0][count] in sublist for sublist in 컴퓨터_앞자리_번호_등록됨[0])
          if cancleany:
            컴퓨터_앞자리_번호_등록됨.remove(컴퓨터_앞자리_물음[0][count])
            컴퓨터_앞자리_번호_물음.remove(컴퓨터_앞자리_물음[0][count])
            컴퓨터_앞자리_번호_등록안됨.append(컴퓨터_앞자리_물음[0][count])
          cancleany2 = any(컴퓨터_앞자리_물음[1][count] in sublist for sublist in 컴퓨터_앞자리_번호_등록됨[1])
          if cancleany2:
            컴퓨터_앞자리_번호_등록됨.remove(컴퓨터_앞자리_물음[1][count])
            컴퓨터_앞자리_번호_물음.remove(컴퓨터_앞자리_물음[1][count])
            컴퓨터_앞자리_번호_등록안됨.append(컴퓨터_앞자리_물음[1][count])

        # 카운트(인덱스),고유번호(자리번호), 컴퓨터, 자리


        # 컴퓨터앞자리 번호는 입력을 받기로 혹은 선택한 번호로 하는게 나을지도.
        while complete == False:
            # 흠..처음에 어떤 자리가 찼는지 어떤자리가 공석인지 알려주는게 낳겠어
            # 그건 나중에 gui로 구현하고 그냥 gui에서 쓸만할 정도로 무엇을 물어보는게 좋을지..이미 된것 같기도 하고
            x_com = int(input("몇번째 컴퓨터입니까?"))
            if x_com >= 6 or x_com <= 0:
              print("컴퓨터는 1부터 6까지 있습니다. 다시 응답해 주십시오")
              continue
            x_sit = int(input("몇번째 자리입니까?"))
            if x_sit >= 6 or x_sit <= 0:
              print("자리는 1부터 6까지 있습니다. 다시 응답해 주십시오")
              continue
            self.컴퓨터_앞자리_물음[0].append(x_com)
            self.컴퓨터_앞자리_물음[1].append(x_sit)
            # 등록안됨에서 물음에 해당하는 것을 빼와서 등록됨에 등록
            if [[1],[1]] in self.고유번호:
              pass
              # 예시 숫자로 1,1을 넣은것 뿐, 이코드는 어펜드를 반복하게 하지 않는것 일뿐이다.
            else:
              for n in range(len(컴퓨터_앞자리_번호_등록안됨[0])):
                for z in reversed(컴퓨터_앞자리_번호_등록안됨[1]):
                  self.고유번호.append((n*6)-(z)+7)
                    # print(고유번호)
            # 일시_고유번호_학생 = 컴퓨터_앞자리_물음[0][count]

              for n, elem in enumerate(컴퓨터_앞자리_물음[0]):
                found = 컴퓨터_앞자리_물음[0][n] in 컴퓨터_앞자리_번호_등록안됨[0]
                if found:
              for n, elem in enumerate(컴퓨터_앞자리_물음[1]):
                found = 컴퓨터_앞자리_물음[1][n] in 컴퓨터_앞자리_번호_등록안됨[1]
                if found:
              # found = any(컴퓨터_앞자리_물음[0][count] == item for sublist in 컴퓨터_앞자리_번호_등록안됨[0][n] for item in sublist)
            # found = any(컴퓨터_앞자리_물음[0][count] == item for sublist in 컴퓨터_앞자리_번호_등록안됨[0] for item in sublist)
            # found = any(컴퓨터_앞자리_물음[0] in sublist for sublist in 컴퓨터_앞자리_번호_등록안됨[0])
            if found:
              컴퓨터_앞자리_번호_등록안됨[0][count].remove(컴퓨터_앞자리_물음[0][count])
              컴퓨터_앞자리_번호_등록됨[0].append(컴퓨터_앞자리_물음[0][count])
              컴퓨터_앞자리_번호_물음[0].remove(컴퓨터_앞자리_물음[0][count])

            found = any(컴퓨터_앞자리_물음[1][count] == item for sublist in 컴퓨터_앞자리_번호_등록안됨[1] for item in sublist)
            # found2 = any(컴퓨터_앞자리_물음[1] in sublist for sublist in 컴퓨터_앞자리_번호_등록안됨[1])
            if found2:
              컴퓨터_앞자리_번호_등록안됨[1].remove(컴퓨터_앞자리_물음[1][count])
              컴퓨터_앞자리_번호_등록됨[1].append(컴퓨터_앞자리_물음[1][count])
              컴퓨터_앞자리_번호_물음[1].remove(컴퓨터_앞자리_물음[1][count])


            # boolean == found
            # 취소시 요소를 삭제
            # count를 인덱스처럼

            serialn = ((컴퓨터_앞자리_물음[0][count]*6)-(컴퓨터_앞자리_물음[1][count])+7)

            self.고유번호_컴퓨터자리와학생[0][count] = count
            self.고유번호_컴퓨터자리와학생[1][count] = self.고유번호[serialn]
            self.고유번호_컴퓨터자리와학생[2][count] = self.컴퓨터_앞자리_등록됨[0][count]
            self.고유번호_컴퓨터자리와학생[3][count] = self.컴퓨터_앞자리_등록됨[1][count]
            print(고유번호_컴퓨터자리와학생)
            self.count =+ 1

            if input("전자기기가 있습니까?, True, False로 대답하십시오") == True:
                self.전자기기_여부 = self.전자기기_여부[0]
            if input("전자기기가 있습니까?, True, False로 대답하십시오") == False:
                self.전자기기_여부 = self.전자기기_여부[1]
                continue



            # 컴퓨터_앞자리[[index_0_com],[index_0_sit]].append(컴퓨터_앞자리_컴퓨터)
            # 컴퓨터_앞자리[[index_0_com],[index_0_sit]].append(컴퓨터_앞자리_컴퓨터)

            # 컴퓨터_앞자리[index_computer,index_sit] = input()
            # 컴퓨터_앞자리_자리

            # 컴퓨터_앞자리_번호 = [[1],[3]]

            # 내가 고른 번호가 이미 있는지 그리고 마지막으로 그것이 겹치는게 없는지

            # 컴퓨터_앞자리_번호 = [[np.randint(low = 1, high = 6)],[np.randint(low = 1, high = 6)]]
            if 고유번호 in 컴퓨터_앞자리_등록됨:
                인원수 += 1
                if 전자기기_여부 == True:
                    print("충전중")
                    if 인원수 == 36:
                        complete = True
                elif 전자기기_여부 == False:
                    print("충전대기중")
                    if 인원수 == 36:
                        complete = True

            print(고유번호_컴퓨터자리와학생)
            # if 1,2,3,4,5,6 not in (컴퓨터_앞자리[0],컴퓨터_앞자리[1])

            # 1.끝나게 할것

            # 2.인원수와 컴퓨터 자리, 찬 자리에 따라 print를 만들고 다 찬인원에 따라 또다른 pritn
            # 그리고 막는것 잘못되었고
            #시작하고 반복할때 그것이 무슨 자리가 남았는지 컴퓨터 자리에 따라
            # 그리고 추가적으로 무엇을 추가로 알고싶은지 구상하면 좋을듯. 에를 들면 몇번자리가 비어있나요 같은거
            #인원수와 추가된 자리수를 동일하게 말하면 자리가 없습니다
            #나중에 gui로 구현하는 것도 나쁘지 않을듯
            #gui로 구현하면 취소를 선택할시 이전자리들을 정리한것과 새로우 입력으로 자리를 배정받은것을 기억하여 취소하면 돌아갈 수 있게

a = 컴퓨터자리와_충전()
a.충전과정()

lst = [[1,2],[3,4]]
lstt = [[1,2,3],[4,5,6]]
if [[1],[3]] in lst:
  print(맞아요)
lst[0].remove(lstt[0][0])
print(lst)



outer_list = [[1, 2], [3, 4]]
inner_list = [[1],[3]]  # 찾고자 하는 요소 리스트

# inner_list의 요소가 outer_list 내의 서브 리스트들에 존재하는지 확인
found = any(inner_list[0] in sublist for sublist in outer_list)

if found:
    print("inner_list의 요소가 outer_list의 서브 리스트에 있습니다.")
else:
    print("inner_list의 요소가 outer_list의 서브 리스트에 없습니다.")



if int(input("몇번째 자리입니까?")) >= 6 or <= 0:
  print(아님)

컴퓨터_앞자리_번호_등록안됨 = [[1,2,3,4,5,6],[1,3,4,5,6]]
컴퓨터_앞자리_번호_등록됨 = [[],[]]
컴퓨터_앞자리_물음 = [[1,2,3],[3,4,5,6]]
count = 0
고유번호 = [1,2,3]
for x in range(2):
  for n, elem in enumerate(컴퓨터_앞자리_물음[x]):
    found = 컴퓨터_앞자리_물음[x][n] in 컴퓨터_앞자리_번호_등록안됨[x]
    if found:
      # 컴퓨터_앞자리_번호_등록됨.remove(elem)
      컴퓨터_앞자리_번호_등록됨[x].append(elem)
      컴퓨터_앞자리_번호_등록안됨[x].remove(elem)
      print(컴퓨터_앞자리_물음)
      print(컴퓨터_앞자리_번호_등록됨)
      print(컴퓨터_앞자리_번호_등록안됨)
물음 = [[],[]]
print(물음)
#

# for n, elem in enumerate(컴퓨터_앞자리_물음[1]):
#   found = 컴퓨터_앞자리_물음[1][n] in 컴퓨터_앞자리_번호_등록안됨[1]
#   if found:
#     print('yes')
#     print(found)
#  중요한건 물음이 등록안됨에 있는지를 판별